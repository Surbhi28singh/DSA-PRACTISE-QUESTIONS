class Solution {
  public:
  int merge(vector<int>&arr,int start,int mid,int end){
      int i=start;
      int j=mid+1;
      vector<int>temp;
      int cnt=0;
     
      while(i<=mid && j<=end){
          if(arr[i]<=arr[j]){
              temp.push_back(arr[i++]);
          }
          else{
             temp.push_back(arr[j++]);
              cnt+=(mid-i+1);
          }
      }
      while(i<=mid){
          temp.push_back(arr[i++]);
      }
      while(j<=end){
          temp.push_back(arr[j++]);
      }
      for (int k = 0; k < temp.size(); k++) {
            arr[start + k] = temp[k];  
        }

      
      return cnt;
     
  }
   int mergesort(vector<int>&arr,int start,int end){
       int cnt=0;
       if(start>=end)
       return 0;
       int  mid=start+(end-start)/2;
       cnt+=mergesort(arr,start,mid);
       cnt+=mergesort(arr,mid+1,end);
       cnt+=merge(arr,start,mid,end);
       return cnt;
   }
   int inversionCount(vector<int> &arr) {
        int n =arr.size();
        return mergesort(arr,0,n-1);
        
    }
};
