bool isCircular(Node* head){
    if(head==NULL){
        return true;
    }
    Node*temp=head->next;
    while( temp!=NULL && temp!=head){
      temp=temp->next;
    }
      if(temp==head){
            return true;
        }
        
          return false;
        
} 
//Problem Description
The isCircular function checks whether a given singly linked list is circular. A circular linked list is one in which the last node points back to the head of the list, forming a cycle.

Function: bool isCircular(Node* head)
Input: The function takes the head node of a singly linked list.
Output: Returns true if the linked list is circular, and false otherwise.
Logic:
The function starts by checking if the list is empty (head == NULL), returning true in that case (since an empty list is trivially circular).
It then initializes a temp pointer to traverse the list, starting from the second node (head->next).
The temp pointer moves through the list one node at a time.
If the temp pointer revisits the head, the function concludes that the list is circular and returns true.
If temp reaches NULL, it means the list has no cycle, so it returns false.
Time Complexity:
O(n), where n is the number of nodes in the list, as we traverse each node once.
Space Complexity:
O(1), as we use only a constant amount of space for the temp pointer.
