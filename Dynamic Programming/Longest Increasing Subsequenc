//top down//
class Solution {
public:
    int solve(vector<int>& arr, int curr, int prev,vector<vector<int>>&dp) {
        int n = arr.size();
        if (curr == n)
            return 0;
            if(dp[curr][prev+1]!=-1)
            return dp[curr][prev+1];

        int take = 0;
        if (prev == -1 || arr[curr] > arr[prev])  
            take = 1 + solve(arr, curr + 1, curr,dp); 

        int notTake = solve(arr, curr + 1, prev,dp); 
        
        dp[curr][prev+1]=max(take, notTake); 
        return dp[curr][prev +1];
    }
    

    int lis(vector<int>& arr) {
         int n = arr.size();
       vector<vector<int>> dp(n+1, vector<int>(n+1, -1));

        return solve(arr, 0, -1,dp);
    }
};
//bottom up//
class Solution {
public:
    int solve(vector<int>& arr) {
        int n = arr.size();
        vector<vector<int>> dp(n + 1, vector<int>(n + 1, 0)); 
        
      
        for (int curr = n - 1; curr >= 0; curr--) {
           
            for (int prev = curr - 1; prev >= -1; prev--) {
                int take = 0;
                if (prev == -1 || arr[curr] > arr[prev]) {  
                    take = 1 + dp[curr + 1][curr+1];  
                }
                
                int notTake = dp[curr + 1][prev + 1];  
                
                dp[curr][prev + 1] = max(take, notTake);  
            }
        }
        
        return dp[0][0]; 
    }

    int lis(vector<int>& arr) {
        return solve(arr); 
    }
};
//dp with binary search//
class Solution {
public:
    int solve(vector<int>& arr) {
        int n = arr.size();
       vector<int>ans;
        ans.push_back(arr[0]);
        for(int i=1;i<arr.size();i++){
            if(arr[i]>ans.back()){
                ans.push_back(arr[i]);
            }
            else{
                int index=lower_bound(ans.begin(),ans.end(),arr[i])-ans.begin();
                ans[index]=arr[i];
            }
        }
        return ans.size();
    }

    int lis(vector<int>& arr) {
        return solve(arr); 
    }
};


