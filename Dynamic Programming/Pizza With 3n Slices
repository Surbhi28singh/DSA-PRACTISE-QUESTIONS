//top down//
class Solution {
public:
int solve(vector<int>& slices,int index,int endindex,int n,  vector<vector<int>>&dp){
    if( n==0 || index>endindex )
    return 0;
    if(dp[index][n]!=-1)
    return dp[index][n];

    int take=0;

    take=slices[index]+solve(slices,index+2,endindex,n-1,dp);
    int nottake=solve(slices,index+1,endindex,n,dp);
 dp[index][n]= max(take,nottake);
 return dp[index][n];
}
    int maxSizeSlices(vector<int>& slices) {
        int k=slices.size();
     
        vector<vector<int>>dp1(k,vector<int>(k,-1));
                vector<vector<int>>dp2(k,vector<int>(k,-1));
        int case1=solve(slices,0,k-2,k/3,dp1);
         int case2=solve(slices,1,k-1,k/3,dp2);
  return max(case1,case2);
    }
};
//bottom up//
class Solution {
public:
int solve(vector<int>& slices){
       int k=slices.size();
     vector<vector<int>>dp1(k+2,vector<int>(k+2,0));
     vector<vector<int>>dp2(k+2,vector<int>(k+2,0));
   for(int index=k-2;index>=0;index--){
    for(int n=1;n<=k/3;n++){
    int take=0;
    take=slices[index]+dp1[index+2][n-1];
    int nottake=dp1[index+1][n];
    dp1[index][n]= max(take,nottake);

    }
   }
   int case1=dp1[0][k/3];
   for(int index=k-1;index>=0;index--){
    for(int n=1;n<=k/3;n++){
    int take=0;
    take=slices[index]+dp2[index+2][n-1];
    int nottake=dp2[index+1][n];
    dp2[index][n]= max(take,nottake);

    }
   }
   int case2=dp2[1][k/3];
   return max(case1,case2);
    
}
    int maxSizeSlices(vector<int>& slices) {
        return solve(slices);
    }
};
//space optimization//
class Solution {
public:
int solve(vector<int>& slices){
       int k=slices.size();
     vector<int>prev1(k+2,0);
    vector<int>curr1(k+2,0);
     vector<int>next1(k+2,0);
   for(int index=k-2;index>=0;index--){
    for(int n=1;n<=k/3;n++){
    int take=0;
    take=slices[index]+next1[n-1];
    int nottake=curr1[n];
      prev1[n]= max(take,nottake);

    }
    next1=curr1;
    curr1=prev1;
   }
   int case1=curr1[k/3];
    vector<int>prev2(k+2,0);
    vector<int>curr2(k+2,0);
     vector<int>next2(k+2,0);
   for(int index=k-1;index>=1;index--){
    for(int n=1;n<=k/3;n++){
    int take=0;
    take=slices[index]+next2[n-1];
    int nottake=curr2[n];
    prev2[n]= max(take,nottake);

    }
    next2=curr2;
    curr2=prev2;
   }
   int case2=curr2[k/3];
   return max(case1,case2);
    
}
    int maxSizeSlices(vector<int>& slices) {
        return solve(slices);
    }
};
