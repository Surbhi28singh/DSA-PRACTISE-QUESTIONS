class Solution {
public:
bool check(vector<int>&base,vector<int>&newbox){
    if(newbox[0]<=base[0]&& newbox[1]<=base[1] && newbox[2]<=base[2])
    return true;
    else
    return false;
}
int solve(vector<vector<int>>& arr){
    int n =arr.size();
    vector<int>curr(n+1,0);
     vector<int>next(n+1,0);
     for(int curre=n-1;curre>=0;curre--){
        for(int prev=curre-1;prev>=-1;prev--){
         int take = 0;
                if (prev == -1 || check(arr[curre] , arr[prev])) {  
                    take = arr[curre][2]+ next[curre+1];  
                }
                
                int notTake = next[prev + 1];  
                
                curr[prev + 1] = max(take, notTake);  
        }
        next=curr;
     }
     return next[0];
}
    int maxHeight(vector<vector<int>>& cuboids) {
        for(auto &a:cuboids){
            sort(a.begin(),a.end());
        }
        sort(cuboids.begin(),cuboids.end());
        return solve(cuboids);
    }
};
