//top down//
class Solution {
public:
int solve(vector<int>& nums1, vector<int>& nums2,int index ,bool swapped,vector<vector<int>>&dp){
    if(index==nums1.size()){
        return 0;
    }
      if(dp[index][swapped]!=-1){
        return dp[index][swapped];
}
    int prev1=nums1[index-1];
    int prev2=nums2[index-1];
    if(swapped==1){
        swap(prev1,prev2);
    }
  
    //noswap

    int ans= INT_MAX;
    if(nums1[index]>prev1 && nums2[index]>prev2){
     ans=0+solve(nums1,nums2,index+1,0,dp);
    }
    //swap
     if(nums1[index]>prev2 && nums2[index]>prev1){
     ans=min(ans,1+solve(nums1,nums2,index+1,1,dp));
    }
    return dp[index][swapped]=ans;
}
    int minSwap(vector<int>& nums1, vector<int>& nums2) {
        
        nums1.insert(nums1.begin(),-1);
        nums2.insert(nums2.begin(),-1);
        bool swapped=0;
        int n=nums1.size();
        vector<vector<int>>dp(n+1,vector<int>(2,-1));
        return solve(nums1,nums2,1,swapped,dp);
    }
};
//bottom up//
class Solution {
public:
int solve(vector<int>& nums1, vector<int>& nums2){
     int n=nums1.size();
    vector<vector<int>>dp(n+1,vector<int>(2,0));
    
   
  for(int i =n-1;i>=1;i--){
    for(int j=1;j>=0;j--){
        //noswap

     int prev1=nums1[i-1];
    int prev2=nums2[i-1];
    if(j==1){
        swap(prev1,prev2);
    }
    
    int ans= INT_MAX;
    if(nums1[i]>prev1 && nums2[i]>prev2){
     ans=dp[i+1][0];
    }
    //swap
     if(nums1[i]>prev2 && nums2[i]>prev1){
     ans =min(ans,1+dp[i+1][1]);
    }
     dp[i][j] = ans;
    }
  }
    //noswap
    return dp[1][0];
}
    int minSwap(vector<int>& nums1, vector<int>& nums2) {
        
        nums1.insert(nums1.begin(),-1);
        nums2.insert(nums2.begin(),-1);
       
        int n=nums1.size();
        
        return solve(nums1,nums2);
    }
};
//space optimization//
class Solution {
public:
int solve(vector<int>& nums1, vector<int>& nums2){
     int n=nums1.size();
  int swap=0;
  int noswap=0;
  int currswap=0;
  int nocurrswap=0;
    
   
  for(int i =n-1;i>=1;i--){
    for(int j=1;j>=0;j--){
        //noswap

     int prev1=nums1[i-1];
    int prev2=nums2[i-1];
    if(j==1){
        int temp=prev2;
        prev2=prev1;
        prev1=temp;
       
    }
    
    int ans= INT_MAX;
    if(nums1[i]>prev1 && nums2[i]>prev2){
     ans=noswap;
    }
    //swap
     if(nums1[i]>prev2 && nums2[i]>prev1){
     ans =min(ans,1+swap);
    }
    if(j){
        currswap=ans;
    }
    else{
        nocurrswap=ans;
    }
    
    }
    swap=currswap;
    noswap=nocurrswap;
  }
    //noswap
    return min(noswap,swap);
}
    int minSwap(vector<int>& nums1, vector<int>& nums2) {
        
        nums1.insert(nums1.begin(),-1);
        nums2.insert(nums2.begin(),-1);
       
        int n=nums1.size();
        
        return solve(nums1,nums2);
    }
};
