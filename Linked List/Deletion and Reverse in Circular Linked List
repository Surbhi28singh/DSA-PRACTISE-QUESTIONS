class Solution {
  public:
    // Function to reverse a circular linked list
    
      Node* reverse(Node* head) {
    if (!head || head->next == head)
        return head;

    Node* prev = nullptr;
    Node* curr = head;
    Node* next = nullptr;
    Node* tail = head;

    do {
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
    } while (curr != head);
    tail->next = prev;

    return prev; 
}

    

    // Function to delete a node from the circular linked list
    Node* deleteNode(Node* head, int key) {
        if(head==NULL){
            return NULL;
        }
       if (head->data == key && head->next == head) {
        delete head;
        return NULL;
    }
        Node*curr=head;
        Node*prev=NULL;
        if(head->data==key){
            Node*last=head;
            while(last->next!=head){
                last=last->next;
            }
            last->next=head->next;
            Node*temp=head;
            head=head->next;
            delete temp;
            return head;
        }
        do{
            prev=curr;
            curr=curr->next;
            if(curr->data==key){
                prev->next=curr->next;
                delete curr;
                return head;
            
            }
        }
        while(curr!=head);
       return head;  
       
    }
};
