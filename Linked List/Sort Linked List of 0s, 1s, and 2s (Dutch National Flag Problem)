Approach 1: Count and Rearrange
In this approach, you first count the occurrences of 0, 1, and 2 in the linked list.
Then, you traverse the list again and update the values of the nodes based on the counts, 
setting the values in the correct order (0s first, followed by 1s, and finally 2s).
//approach1//
Node* sortList(Node *head){
    int zeroCount=0;
    int oneCount=0;
    int twoCount=0;
    Node*temp=head;
    while(temp!=NULL){
        if(temp->data==0){
            zeroCount++;
        }
        else if(temp->data==1){
            oneCount++;
        }
        else if(temp->data==2){
            twoCount++;
        }
        temp=temp->next;
    }
    temp=head;
    while(temp!=NULL){
        if(zeroCount!=NULL){
            temp->data=0;
            zeroCount--;
        }
        else if(oneCount!=NULL){
            temp->data=1;
            oneCount--;
        }
        else if(twoCount!=NULL){
            temp->data=2;
            twoCount--;
        }
        temp=temp->next;
    }
    return head;
}
//Approach 2: Using Multiple Lists for Partitioning
Here, you're using three separate linked lists (one for each value: 0, 1, and 2).
You traverse the original list, and based on the value of each node, you insert it into the respective list.
After that, you combine the three lists (0s first, followed by 1s, and finally 2s) into one sorted linked list.
//approach2//
void insertAtTail(Node* &tail,Node*curr){
    tail->next=curr;
    tail=curr;
}

Node* sortList(Node *head){
    Node*zeroHead=new Node(-1);
    Node*zeroTail=zeroHead;
    Node*oneHead=new Node(-1);
    Node*oneTail=oneHead;
    Node*twoHead=new Node(-1);
    Node*twoTail=twoHead;
    Node*curr=head;
    while(curr!=NULL){
        int value=curr->data;
        if(value==0){
            insertAtTail(zeroTail,curr);
        }
        else if(value==1){
            insertAtTail(oneTail,curr);
        }
        if(value==2){
            insertAtTail(twoTail,curr);
        }
        curr=curr->next;
    }
    if(oneHead->next!=NULL){
        zeroTail->next=oneHead->next;
    }
    else{
        zeroTail->next=twoHead->next;
    }
    oneTail->next=twoHead->next;
    twoTail->next=NULL;
    head=zeroHead->next;
    delete zeroHead;
    delete oneHead;
    delete twoHead;
    return head;
}
