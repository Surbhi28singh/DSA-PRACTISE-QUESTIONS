class Solution {
  public:
  vector<int>lsp(string& pat){
      int m=pat.size();
      vector<int>lps(m,0);
      int i=0;
      int j=1;
      while(j<m){
          if(pat[i]==pat[j]){
             i++;
             lps[j]=i;
              j++;
            
          }
          else{
              if(i!=0){
                  i=lps[i-1];
                  
              }
              else{
                  lps[j]=0;
                  j++;
                  
              }
          }
      }
      return lps;
  }
  vector<int>kmpsearch(string& text, string& pat){
      int n=text.size();
      int m=pat.size();
      vector<int>lps1=lsp(pat);
      vector<int>result;
      int i=0;
      int j=0;
      while(i<n){
          if(text[i]==pat[j]){
              i++;
              j++;
          }
          if(j==m){
              result.push_back(i-j);
              j=lps1[j-1];
          }
         else if(i<n && text[i]!=pat[j]){
             if(j!=0){
                  j=lps1[j-1];      
               }
               else{
                   i++;
               }
         }
          
      }
      return result;
  }
  
  
  
    vector<int> search(string& pat, string& txt) {
     
       return kmpsearch(txt,pat);
    }
};
