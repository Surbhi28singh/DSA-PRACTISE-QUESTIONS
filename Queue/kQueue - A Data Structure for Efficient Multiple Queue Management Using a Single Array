#include <iostream>
using namespace std;
class kQueue {
public:
	int n;
	int k;
	int *arr;
	int*rear;
	int*front;
	int*next;
	int freespot;
public:
	kQueue(int n,int k) {
		this->n=n;
		this->k=k;
		arr=new int[n];
		front=new int[k];
		rear=new int[k];
		for(int i=0;i<k;i++){
		    front[i]=-1;
		    rear[i]=-1;
		}
		next=new int[n];
			for(int i=0;i<n;i++){
		    next[i]=i+1;
		}
		next[n-1]=-1;
		freespot=0;

	}
	void enqueue(int data,int qn){
	    if(freespot==-1){
	        cout<<"no empty space"<<endl;
	        return;
	    }
	    int index=freespot;
	    freespot=next[index];
	    if(front[qn-1]==-1){
	        front[qn-1]=index;
	    }
	    else{
	        next[rear [qn-1]]=index;
	    }
	    next[index]=-1;
	    rear[qn-1]=index;
	    arr[index]=data;
	    
	}
	int dequeue(int qn){
	    if(front[qn-1]==-1){
	        cout<<"underflow"<<endl;
	        return -1;
	    }
	    int index=front[qn-1];
	    front[qn-1]=next[index];
	     next[index]=freespot;;
	   freespot=index;
	   return arr[index];
	    
	}
};

int main()
{
kQueue q(5,2);
q.enqueue(10,1);
q.enqueue(21,2);
q.enqueue(15,1);
q.enqueue(19,2);
cout<<q.dequeue(1)<<endl;
cout<<q.dequeue(2)<<endl;
cout<<q.dequeue(1)<<endl;
cout<<q.dequeue(2)<<endl;
cout<<q.dequeue(1)<<endl;
	return 0;
}
//kQueue is a C++ implementation that allows managing multiple queues using a single array. 
It efficiently handles enqueue and dequeue operations for multiple queues through an innovative technique that links available free spots in memory,
ensuring optimal space utilization. This data structure supports dynamic allocation, ensuring scalability and performance for a large number of queues.
Perfect for scenarios where multiple queues need to be managed within a fixed array size.

Key Features:
Efficiently manages k queues using a single array.
Uses an auxiliary next array to link free spots in memory.
Allows enqueue and dequeue operations on each queue.
Handles underflow and overflow conditions with appropriate error messages.
Suitable for scenarios where memory efficiency is crucial.
