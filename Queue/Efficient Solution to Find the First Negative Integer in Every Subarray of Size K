class Solution {
  public:
    vector<int> FirstNegativeInteger(vector<int>& arr, int k) {
        deque<int> dq;
        vector<int> ans;

        for(int i = 0; i < k; i++) {
            if(arr[i] < 0) {
                dq.push_back(i);
            }
        }

        if(dq.size() > 0) {
            ans.push_back(arr[dq.front()]);
        } else {
            ans.push_back(0);
        }

        // remaining windows
        for(int i = k; i < arr.size(); i++) {
            if(!dq.empty() && i - dq.front() >= k) {
                dq.pop_front();
            }
            if(arr[i] < 0) {
                dq.push_back(i);
            }
            if(dq.size() > 0) {
                ans.push_back(arr[dq.front()]);
            } else {
                ans.push_back(0);
            }
        }
        return ans;
    }
};
//This solution provides an efficient approach to find the first negative integer in every subarray of size K from a given array of integers.
The algorithm utilizes a sliding window technique with a deque (double-ended queue) to track the indices of negative integers within the current window.
It processes each element in the array, ensuring that the solution runs in linear time, O(N), where N is the number of elements in the input array.

Key Features:

Uses a deque to maintain indices of negative integers within the current window.
For each window of size K, returns the first negative integer. If no negative integer exists, returns 0.
Efficient solution with a time complexity of O(N).
