#include <bits/stdc++.h> 
class CircularQueue{
    int*arr;
    int front;
    int rear;
    int size;

    public:

    
    CircularQueue(int n){
        
        size=n;
        arr=new int[size];
        front=rear=-1;
    }

    // Enqueues 'X' into the queue. Returns true if it gets pushed into the stack, and false otherwise.
    bool enqueue(int value){
        if((front==0 && rear==size-1)||(rear==(front-1)%(size-1))){
            return false;
        }
        else if(front==-1){
            front=rear=0;
          
        }
        else if(rear==size-1 && front!=0){
             rear=0;
            
        }
        else{
            rear++;
         
        }
          arr[rear]=value;
        return true;
    }

    // Dequeues top element from queue. Returns -1 if the stack is empty, otherwise returns the popped element.
    int dequeue(){
     if(front==-1){
         return -1;
     }
       int ans=arr[front];
       arr[front]=-1;
     if(front==rear){
        front=rear=-1;
     }
     else if(front==size-1)
     {
         front=0;
     }
     else{
         front++;
     }
     return ans;
    }
};
//This C++ implementation provides a circular queue with dynamic size. The queue supports the following operations:

enqueue(value): Adds an element to the queue.
dequeue(): Removes and returns the front element of the queue.
front(): Returns the front element without removing it (not implemented in this code, but can be added if required).
The queue operates in a circular manner, which means that when the rear pointer reaches the end of the array, 
it wraps around to the beginning of the array. It also handles the case where the queue is full or empty. 
The code uses a fixed-size array to store the queue elements, and uses two pointers (front and rear) to keep track of the position of elements in the queue.

Features:

Efficient circular array handling.
Prevents overflow by checking if the queue is full.
Handles wrap-around behavior of circular queues.
