//USING BFS//
#include <list>
#include <unordered_map>
#include <queue>


bool isCycle(int node, vector<list<int>>& adj, vector<bool>& visited) {
    vector<int> parent(visited.size(), -1); 
    queue<int> q;
    visited[node] = true;
    q.push(node);

    while (!q.empty()) {
        int front = q.front();
        q.pop();
        for (auto i : adj[front]) {
            if (visited[i] && parent[front] != i) {
                return true;
            } 
            else if (!visited[i]) {
                q.push(i);
                visited[i] = true;
                parent[i] = front;
            }
        }
    }
    return false;
}

string cycleDetection(vector<vector<int>>& edges, int n, int m) {
    vector<list<int>> adj(n + 1);
    for (int i = 0; i < m; i++) {
        int u = edges[i][0];
        int v = edges[i][1];
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    vector<bool> visited(n + 1, false);
    for (int i = 1; i <= n; i++) {
        if (!visited[i]) {
            if (isCycle(i, adj, visited)) {
                return "Yes";
            }
        }
    }
    return "No";
}

//USING DFS//
#include <list>
#include <vector>
using namespace std;

bool isCycle(int node, vector<list<int>>& adj, vector<bool>& visited, int parent) {
    visited[node] = true;
    
    for (auto i : adj[node]) {
        if (!visited[i]) {
            if (isCycle(i, adj, visited, node)) { 
                return true;
            }
        } 
        else if (i != parent) {
            return true;  
        }
    }
    return false;
}

string cycleDetection(vector<vector<int>>& edges, int n, int m) {
    vector<list<int>> adj(n + 1);
    for (int i = 0; i < m; i++) {
        int u = edges[i][0];
        int v = edges[i][1];
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    vector<bool> visited(n + 1, false);
    for (int i = 1; i <= n; i++) {
        if (!visited[i]) {
            if (isCycle(i, adj, visited, -1)) { 
                return "Yes";
            }
        }
    }
    return "No";
}








