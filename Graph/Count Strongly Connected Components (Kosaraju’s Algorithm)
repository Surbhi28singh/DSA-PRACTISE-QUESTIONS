#include <bits/stdc++.h>
using namespace std;

void dfs(int node, unordered_map<int, list<int>> &adj, vector<bool> &vis, stack<int> &s) {
    vis[node] = true;
    for (auto i : adj[node]) {
        if (!vis[i]) {
            dfs(i, adj, vis, s);
        }
    }
    s.push(node);
}

void revdfs(int node, vector<bool> &vis, unordered_map<int, list<int>> &trans) {
    vis[node] = true;
    for (auto i : trans[node]) {
        if (!vis[i]) {
            revdfs(i, vis, trans);
        }
    }
}

int stronglyConnectedComponents(int v, vector<vector<int>> &edges) {
    unordered_map<int, list<int>> adj;
    for (int i = 0; i < edges.size(); i++) {
        int u = edges[i][0];
        int w = edges[i][1];
        adj[u].push_back(w);
    }

    stack<int> s;
    vector<bool> vis(v, false);
    for (int i = 0; i < v; i++) {
        if (!vis[i]) {
            dfs(i, adj, vis, s);
        }
    }

    unordered_map<int, list<int>> trans;
    for (int i = 0; i < v; i++) {
        for (auto nbr : adj[i]) {
            trans[nbr].push_back(i);
        }
    }

    fill(vis.begin(), vis.end(), false);
    int count = 0;
    while (!s.empty()) {
        int top = s.top();
        s.pop();
        if (!vis[top]) {
            count++;
            revdfs(top, vis, trans);
        }
    }
    return count;
}
