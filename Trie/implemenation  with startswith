class Trienode {
public:
    char ch;
    Trienode* children[26];
    bool isTerminal;

    Trienode(char data) {
        ch = data;
        for (int i = 0; i < 26; i++) {
            children[i] = NULL;
        }
        isTerminal = false;
    }
};
class Trie {
public:
public:
    Trienode* root; 
    Trie() {
        root = new Trienode('\0');  
    }
    
    void insert(string word) {
         insertHelper(root, word);
    }
    
    bool search(string word) {
        return searchHelper(root, word);
    }
    
    bool startsWith(string prefix) {
         return startsWithHelper(root, prefix);
    }
     void insertHelper(Trienode* root, string word) {
        if (word.length() == 0) {
            root->isTerminal = true;
            return;
        }
        int index = tolower(word[0]) - 'a';
        Trienode* child;
        if (root->children[index] != NULL) {
            child = root->children[index];
        } else {
            child = new Trienode(word[0]);
            root->children[index] = child;
        }
        insertHelper(child, word.substr(1));
    }

    bool searchHelper(Trienode* root, string word) {
        if (word.length() == 0) {
            return root->isTerminal;
        }
        int index = tolower(word[0]) - 'a';
        Trienode* child;
        if (root->children[index] != NULL) {
            child = root->children[index];
        } else {
            return false;
        }
        return searchHelper(child, word.substr(1));
    }

    bool startsWithHelper(Trienode* root, string prefix) {
        if (prefix.length() == 0) {
            return true;
        }
        int index = tolower(prefix[0]) - 'a';
        Trienode* child;
        if (root->children[index] != NULL) {
            child = root->children[index];
        } else {
            return false;
        }
        return startsWithHelper(child, prefix.substr(1));
    }
};
