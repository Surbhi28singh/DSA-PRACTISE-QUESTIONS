#include <iostream>
using namespace std;

class Trienode {
public:
    char ch;
    Trienode* children[26];
    bool isTerminal;

    Trienode(char data) {
        ch = data;
        for (int i = 0; i < 26; i++) {
            children[i] = NULL;
        }
        isTerminal = false;
    }
};

class Trie {
public:
    Trienode* root = new Trienode('\0');

    void insert(Trienode* root, string word) {
        if (word.length() == 0) {
            root->isTerminal = true;
            return;
        }
        int index = tolower(word[0]) - 'a';
        Trienode* child;
        if (root->children[index] != NULL) {
            child = root->children[index];
        } else {
            child = new Trienode(word[0]);
            root->children[index] = child;
        }
        insert(child, word.substr(1));
    }

    bool search(Trienode* root, string word) {
        if (word.length() == 0) {
            return root->isTerminal;
        }
        int index = tolower(word[0]) - 'a';
        Trienode* child;
        if (root->children[index] != NULL) {
            child = root->children[index];
        } else {
            return false;
        }
        return search(child, word.substr(1));
    }

    void inserting(string word) {
        insert(root, word);
    }

    bool searching(string word) {
        return search(root, word);
    }
};

int main() {
    Trie* t = new Trie();
    t->inserting("SURBHI");
    t->inserting("SINGH");
    cout << "Searching for 'SINGH': " << (t->searching("SINGH") ? "Found" : "Not Found") << endl;
  

    return 0;
}
