//approach1//
class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
        string ans="";
   for(int i=0;i<strs[0].length();i++){
       char ch=strs[0][i];
       bool ismatch=true;
       for(int j=1;j<strs.size();j++){
          if (strs[j].size()<i || ch!=strs[j][i]){
               ismatch=false;
               break;


           }
       }
           if(ismatch==false){
               break;  
           }
           else{
               ans.push_back(strs[0][i]);
           }
       
   }
   return ans;
    }
};
//approach 2//
class Trienode{
    public:
    char data;
    Trienode*children[26];
    int childCount;
    bool isTerminal;
    Trienode(char ch){
        data=ch;
        for(int i=0;i<26;i++){
            children[i]=NULL;
        }
        isTerminal=false;
        childCount=0;
    }
};
class Trie{
    public:
    Trienode*root;
    Trie(char ch){
        root=new Trienode(ch);
    }
      void insert(Trienode* root, string word) {
        if (word.length() == 0) {
            root->isTerminal = true;
            return;
        }
        int index = tolower(word[0]) - 'a';
        Trienode* child;
        if (root->children[index] != NULL) {
            child = root->children[index];
        } else {
            child = new Trienode(word[0]);
            root->children[index] = child;
            root->childCount++;
        }
        insert(child, word.substr(1));
    }
    void inserting(string word) {
        insert(root, word);
    }
    void lcp(string str,string &ans){
        for(int i=0;i<str.length();i++){
            char ch=str[i];
            if(root->childCount==1){
                ans.push_back(ch);
                int index=ch-'a';
                root=root->children[index];
            }
            else{
                break;
            }
            if(root->isTerminal)
            break;
        }

    }
};

string longestCommonPrefix(vector<string> &arr, int n)
{
 Trie*t=new Trie('\0');
 for(int i=0;i<n;i++){
     t->inserting(arr[i]);
 }
 string first=arr[0];
 string ans="";
 t->lcp(first ,ans);
 return ans;
}


