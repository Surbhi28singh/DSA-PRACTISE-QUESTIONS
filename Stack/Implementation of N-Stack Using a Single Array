#include <bits/stdc++.h> 
class NStack
{
    int*arr;
    int*top;
    int*next;
    int n ,s;
    int freespot;
public:
    // Initialize your data structure.
    NStack(int N, int S)
    {
        n=N;
        s=S;
       arr=new int[s];
       top=new int[n];
       next=new int[s];
       for(int i=0;i<n;i++){
           top[i]=-1;
       }
       for(int i=0;i<n;i++){
           next[i]=i+1;
       }
       next[s-1]=-1;
       freespot=0;
    }


    // Pushes 'X' into the Mth stack. Returns true if it gets pushed into the stack, and false otherwise.
    bool push(int x, int m)
    {
       if(freespot==-1){
           return -1;
       }
       int index=freespot;
       freespot=next[index];
       arr[index]=x;
       next[index]=top[m-1];
       top[m-1]=index;
       return true;
    }

    // Pops top element from Mth Stack. Returns -1 if the stack is empty, otherwise returns the popped element.
    int pop(int m)
    {
        if(top[m-1]==-1){
            return -1;
        }
        int index=top[m-1];
        top[m-1]=next[index];
        next[index]=freespot;
        freespot=index;
        return arr[index];

    }
};
//This repository contains an efficient implementation of the N-Stack data structure using a single array. 
The implementation leverages the concept of free spots in a single array to simulate multiple stacks.
This approach provides efficient O(1) time complexity for both push and pop operations.

Key Features:
Space Efficiency: Uses a single array to manage multiple stacks, reducing overhead.
O(1) Push and Pop: Both push and pop operations for each stack are performed in constant time.
Flexible Stack Handling: Supports dynamic handling of multiple stacks with a shared memory space.
Problem Overview:
The problem is to implement a data structure that supports N stacks using a single array, 
where each stack has its own top pointer and can be operated independently. The key challenge is to manage free spaces efficiently,
which is achieved using the next array.

Operations:
Push(x, m): Inserts element x into the mth stack. Returns true if successfully inserted and false if there is no space.
Pop(m): Removes the top element from the mth stack and returns the popped element. If the stack is empty, it returns -1.
