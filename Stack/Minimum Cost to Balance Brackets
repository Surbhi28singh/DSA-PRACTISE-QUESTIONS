#include <bits/stdc++.h> 
#include<stack>
int findMinimumCost(string str) {
  if(str.length()%2!=0){
    return -1;
  }
  stack<char>s;
  for(int i=0;i<str.length();i++){
    char ch=str[i];
    if(ch=='{'){
      s.push(ch);
    }
    else{
      if(!s.empty()&& s.top()=='{'){
        s.pop();
      }
      else{
        s.push(ch);
      }
    }
  }
  int a=0;
  int b=0;
  while(!s.empty()){
    if(s.top()=='{'){
      a++;
    }
    else{
      b++;
    }
    s.pop();
    
  }
  int ans=(a+1)/2+(b+1)/2;
    return ans;
}
//This C++ program calculates the minimum cost required to balance a string of curly brackets ({ and }). 
It works by determining the number of operations needed to make the string balanced. If the string has an odd length, it is not possible to balance it, 
and the program returns -1. 
The program uses a stack-based approach to efficiently track unmatched brackets and compute the minimum number of swaps needed.
