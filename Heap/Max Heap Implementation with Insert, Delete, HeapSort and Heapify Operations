// Online C++ compiler to run C++ program online
#include <iostream>
using namespace std;
class heap{
    public:
    int arr[100];
  int size;
  heap(){
      size=0;
      arr[0]=-1;
  }
  void insert(int val){
      size=size+1;
      int index=size;
      arr[index]=val;
      while(index>1){
      int parent=index/2;
      if(arr[parent]<arr[index]){
          swap(arr[parent],arr[index]);
          index=parent;
      }
      else{
          return ;
      }
      }
  }
  void print(){
      for(int i=1;i<=size;i++){
          cout<<arr[i]<<" ";
      }
      cout<<endl;
  }
  void deletefromHeap(){
     if(size==0){
         cout<<"nothing to delete"<<endl;
     }
     arr[1]=arr[size];
     size--;
     int i=1;
     while(i<size){
         if(2*i<size && arr[2*i]>arr[i]){
             swap(arr[i],arr[2*i]);
         }
           else if(2*i+1<size && arr[2*i+1]>arr[i]){
             swap(arr[i],arr[2*i+1]);
         }
         else{
             return ;
         }
     }
      
  }
};
void heapify(int arr[],int n,int i){
    int largest=i;
    int left=2*i;
    int right=2*i+1;
    if(left<=n&& arr[left]>arr[largest]){
        largest=left;
    }
    if(right<=n&& arr[right]>arr[largest]){
        largest=right;
    }
    if(largest!=i){
        swap(arr[largest],arr[i]);
        heapify(arr,n,largest);
    }
}
void heapSort(int arr[],int n){

while(n>1){
swap(arr[n],arr[1]);
n--;
heapify(arr,n,1);
}
}
int main() {
    heap h;
   h.insert(50); 
   h.insert(53); 
    h.insert(55); 
     h.insert(54); 
      h.insert(52);
      h.print();
      h.deletefromHeap();
      h.print();
     int arr[6]= {-1,50,51,52,53,54};
      int n=5;
      for(int i=n/2;i>=1;i--){
          heapify(arr,n,i);
      }
      for(int i=1;i<=n;i++){
          cout<<arr[i]<< " ";
      }
      cout<<endl;
      heapSort(arr,n);
       for(int i=1;i<=n;i++){
          cout<<arr[i]<< " ";
      }
      cout<<endl;
   return 0;
}
//A C++ implementation of a Max Heap that supports insertion, deletion, and heapify operations. 
code demonstrates the use of heap properties for maintaining the largest element at the root. 
It includes a custom heap class with insert and delete functions, as well as a heapify function to build a heap from an array.



