//approach1//
#include<algorithm>
int getKthLargest(vector<int> &arr, int k)
{
	vector<int>sumArr;
	int n=arr.size();
	
	for(int i=0;i<n;i++){
		int sum=0;
		for(int j=i;j<n;j++){
		sum+=arr[j];
		sumArr.push_back(sum);

		}	
	}
 sort(sumArr.begin(),sumArr.end());
	return sumArr[sumArr.size()-k];
}
//approach2//
#include<queue>
int getKthLargest(vector<int> &arr, int k)
{
	priority_queue<int ,vector<int>,greater<int>>pq;
	int n =arr.size();
	for(int i=0;i<n;i++){
		int sum=0;
		for(int j =i;j<n;j++){
			sum+=arr[j];
			
			if(pq.size()<k){
			pq.push(sum);
			}
			else{
				if(sum>pq.top()){
					pq.pop();
					pq.push(sum);
				}
			}

			
		}
	
	}
		return pq.top();
}
